diff --git a/backend/.env b/backend/.env
new file mode 100644
index 0000000..9a631cd
--- /dev/null
+++ b/backend/.env
@@ -0,0 +1,8 @@
+
+# Connect to Supabase via connection pooling
+DATABASE_URL="postgresql://postgres.xpjxlhemcrnmnigcybfl:oBtkPYvkdA2VLTHe@aws-0-us-west-1.pooler.supabase.com:6543/postgres?pgbouncer=true"
+
+# Direct connection to the database. Used for migrations
+DIRECT_URL="postgresql://postgres.xpjxlhemcrnmnigcybfl:oBtkPYvkdA2VLTHe@aws-0-us-west-1.pooler.supabase.com:5432/postgres"
+
+JWT_SECRET="3e031f903ddbf7e03f419c47d74b84af277cc54ae94cb46d3b7bb6f860870e9fffa717a16d73bae16bf4c8c26da905269ab46dc0bec9ac9cf3689e81a43263be"
\ No newline at end of file
diff --git a/backend/.gitignore b/backend/.gitignore
index 11ddd8d..3c3629e 100644
--- a/backend/.gitignore
+++ b/backend/.gitignore
@@ -1,3 +1 @@
 node_modules
-# Keep environment variables out of version control
-.env
diff --git a/backend/package-lock.json b/backend/package-lock.json
index 4d9f850..e26adfd 100644
--- a/backend/package-lock.json
+++ b/backend/package-lock.json
@@ -6,16 +6,27 @@
     "": {
       "dependencies": {
         "@prisma/client": "^6.7.0",
+        "bcrypt": "^6.0.0",
+        "bcryptjs": "^3.0.2",
+        "cookie-parser": "^1.4.7",
         "cors": "^2.8.5",
+        "date-fns": "^4.1.0",
         "dotenv": "^16.5.0",
-        "express": "^5.1.0"
+        "express": "^5.1.0",
+        "express-async-handler": "^1.2.0",
+        "express-rate-limit": "^7.5.0",
+        "helmet": "^8.1.0",
+        "jsonwebtoken": "^9.0.2",
+        "zod": "^3.25.42"
       },
       "devDependencies": {
+        "@types/cookie-parser": "^1.4.8",
         "@types/cors": "^2.8.18",
         "@types/express": "^5.0.1",
-        "@types/node": "^22.15.15",
+        "@types/jsonwebtoken": "^9.0.9",
+        "@types/node": "^22.15.29",
         "nodemon": "^3.1.10",
-        "prisma": "^6.7.0",
+        "prisma": "^6.8.2",
         "ts-node": "^10.9.2",
         "typescript": "^5.8.3"
       }
@@ -33,431 +44,6 @@
         "node": ">=12"
       }
     },
-    "node_modules/@esbuild/aix-ppc64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.4.tgz",
-      "integrity": "sha512-1VCICWypeQKhVbE9oW/sJaAmjLxhVqacdkvPLEjwlttjfwENRSClS8EjBz0KzRyFSCPDIkuXW34Je/vk7zdB7Q==",
-      "cpu": [
-        "ppc64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "aix"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/android-arm": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.4.tgz",
-      "integrity": "sha512-QNdQEps7DfFwE3hXiU4BZeOV68HHzYwGd0Nthhd3uCkkEKK7/R6MTgM0P7H7FAs5pU/DIWsviMmEGxEoxIZ+ZQ==",
-      "cpu": [
-        "arm"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "android"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/android-arm64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.4.tgz",
-      "integrity": "sha512-bBy69pgfhMGtCnwpC/x5QhfxAz/cBgQ9enbtwjf6V9lnPI/hMyT9iWpR1arm0l3kttTr4L0KSLpKmLp/ilKS9A==",
-      "cpu": [
-        "arm64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "android"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/android-x64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.4.tgz",
-      "integrity": "sha512-TVhdVtQIFuVpIIR282btcGC2oGQoSfZfmBdTip2anCaVYcqWlZXGcdcKIUklfX2wj0JklNYgz39OBqh2cqXvcQ==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "android"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/darwin-arm64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.4.tgz",
-      "integrity": "sha512-Y1giCfM4nlHDWEfSckMzeWNdQS31BQGs9/rouw6Ub91tkK79aIMTH3q9xHvzH8d0wDru5Ci0kWB8b3up/nl16g==",
-      "cpu": [
-        "arm64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/darwin-x64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.4.tgz",
-      "integrity": "sha512-CJsry8ZGM5VFVeyUYB3cdKpd/H69PYez4eJh1W/t38vzutdjEjtP7hB6eLKBoOdxcAlCtEYHzQ/PJ/oU9I4u0A==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/freebsd-arm64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.4.tgz",
-      "integrity": "sha512-yYq+39NlTRzU2XmoPW4l5Ifpl9fqSk0nAJYM/V/WUGPEFfek1epLHJIkTQM6bBs1swApjO5nWgvr843g6TjxuQ==",
-      "cpu": [
-        "arm64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "freebsd"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/freebsd-x64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.4.tgz",
-      "integrity": "sha512-0FgvOJ6UUMflsHSPLzdfDnnBBVoCDtBTVyn/MrWloUNvq/5SFmh13l3dvgRPkDihRxb77Y17MbqbCAa2strMQQ==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "freebsd"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/linux-arm": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.4.tgz",
-      "integrity": "sha512-kro4c0P85GMfFYqW4TWOpvmF8rFShbWGnrLqlzp4X1TNWjRY3JMYUfDCtOxPKOIY8B0WC8HN51hGP4I4hz4AaQ==",
-      "cpu": [
-        "arm"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/linux-arm64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.4.tgz",
-      "integrity": "sha512-+89UsQTfXdmjIvZS6nUnOOLoXnkUTB9hR5QAeLrQdzOSWZvNSAXAtcRDHWtqAUtAmv7ZM1WPOOeSxDzzzMogiQ==",
-      "cpu": [
-        "arm64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/linux-ia32": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.4.tgz",
-      "integrity": "sha512-yTEjoapy8UP3rv8dB0ip3AfMpRbyhSN3+hY8mo/i4QXFeDxmiYbEKp3ZRjBKcOP862Ua4b1PDfwlvbuwY7hIGQ==",
-      "cpu": [
-        "ia32"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/linux-loong64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.4.tgz",
-      "integrity": "sha512-NeqqYkrcGzFwi6CGRGNMOjWGGSYOpqwCjS9fvaUlX5s3zwOtn1qwg1s2iE2svBe4Q/YOG1q6875lcAoQK/F4VA==",
-      "cpu": [
-        "loong64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/linux-mips64el": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.4.tgz",
-      "integrity": "sha512-IcvTlF9dtLrfL/M8WgNI/qJYBENP3ekgsHbYUIzEzq5XJzzVEV/fXY9WFPfEEXmu3ck2qJP8LG/p3Q8f7Zc2Xg==",
-      "cpu": [
-        "mips64el"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/linux-ppc64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.4.tgz",
-      "integrity": "sha512-HOy0aLTJTVtoTeGZh4HSXaO6M95qu4k5lJcH4gxv56iaycfz1S8GO/5Jh6X4Y1YiI0h7cRyLi+HixMR+88swag==",
-      "cpu": [
-        "ppc64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/linux-riscv64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.4.tgz",
-      "integrity": "sha512-i8JUDAufpz9jOzo4yIShCTcXzS07vEgWzyX3NH2G7LEFVgrLEhjwL3ajFE4fZI3I4ZgiM7JH3GQ7ReObROvSUA==",
-      "cpu": [
-        "riscv64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/linux-s390x": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.4.tgz",
-      "integrity": "sha512-jFnu+6UbLlzIjPQpWCNh5QtrcNfMLjgIavnwPQAfoGx4q17ocOU9MsQ2QVvFxwQoWpZT8DvTLooTvmOQXkO51g==",
-      "cpu": [
-        "s390x"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/linux-x64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.4.tgz",
-      "integrity": "sha512-6e0cvXwzOnVWJHq+mskP8DNSrKBr1bULBvnFLpc1KY+d+irZSgZ02TGse5FsafKS5jg2e4pbvK6TPXaF/A6+CA==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/netbsd-arm64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.4.tgz",
-      "integrity": "sha512-vUnkBYxZW4hL/ie91hSqaSNjulOnYXE1VSLusnvHg2u3jewJBz3YzB9+oCw8DABeVqZGg94t9tyZFoHma8gWZQ==",
-      "cpu": [
-        "arm64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "netbsd"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/netbsd-x64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.4.tgz",
-      "integrity": "sha512-XAg8pIQn5CzhOB8odIcAm42QsOfa98SBeKUdo4xa8OvX8LbMZqEtgeWE9P/Wxt7MlG2QqvjGths+nq48TrUiKw==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "netbsd"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/openbsd-arm64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.4.tgz",
-      "integrity": "sha512-Ct2WcFEANlFDtp1nVAXSNBPDxyU+j7+tId//iHXU2f/lN5AmO4zLyhDcpR5Cz1r08mVxzt3Jpyt4PmXQ1O6+7A==",
-      "cpu": [
-        "arm64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "openbsd"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/openbsd-x64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.4.tgz",
-      "integrity": "sha512-xAGGhyOQ9Otm1Xu8NT1ifGLnA6M3sJxZ6ixylb+vIUVzvvd6GOALpwQrYrtlPouMqd/vSbgehz6HaVk4+7Afhw==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "openbsd"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/sunos-x64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.4.tgz",
-      "integrity": "sha512-Mw+tzy4pp6wZEK0+Lwr76pWLjrtjmJyUB23tHKqEDP74R3q95luY/bXqXZeYl4NYlvwOqoRKlInQialgCKy67Q==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "sunos"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/win32-arm64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.4.tgz",
-      "integrity": "sha512-AVUP428VQTSddguz9dO9ngb+E5aScyg7nOeJDrF1HPYu555gmza3bDGMPhmVXL8svDSoqPCsCPjb265yG/kLKQ==",
-      "cpu": [
-        "arm64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "win32"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/win32-ia32": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.4.tgz",
-      "integrity": "sha512-i1sW+1i+oWvQzSgfRcxxG2k4I9n3O9NRqy8U+uugaT2Dy7kLO9Y7wI72haOahxceMX8hZAzgGou1FhndRldxRg==",
-      "cpu": [
-        "ia32"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "win32"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
-    "node_modules/@esbuild/win32-x64": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.4.tgz",
-      "integrity": "sha512-nOT2vZNw6hJ+z43oP1SPea/G/6AbN6X+bGNhNuq8NtRHy4wsMhw765IKLNmnjek7GvjWBYQ8Q5VBoYTFg9y1UQ==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "license": "MIT",
-      "optional": true,
-      "os": [
-        "win32"
-      ],
-      "engines": {
-        "node": ">=18"
-      }
-    },
     "node_modules/@jridgewell/resolve-uri": {
       "version": "3.1.2",
       "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
@@ -509,64 +95,57 @@
       }
     },
     "node_modules/@prisma/config": {
-      "version": "6.7.0",
-      "resolved": "https://registry.npmjs.org/@prisma/config/-/config-6.7.0.tgz",
-      "integrity": "sha512-di8QDdvSz7DLUi3OOcCHSwxRNeW7jtGRUD2+Z3SdNE3A+pPiNT8WgUJoUyOwJmUr5t+JA2W15P78C/N+8RXrOA==",
+      "version": "6.8.2",
+      "resolved": "https://registry.npmjs.org/@prisma/config/-/config-6.8.2.tgz",
+      "integrity": "sha512-ZJY1fF4qRBPdLQ/60wxNtX+eu89c3AkYEcP7L3jkp0IPXCNphCYxikTg55kPJLDOG6P0X+QG5tCv6CmsBRZWFQ==",
       "devOptional": true,
-      "license": "Apache-2.0",
       "dependencies": {
-        "esbuild": ">=0.12 <1",
-        "esbuild-register": "3.6.0"
+        "jiti": "2.4.2"
       }
     },
     "node_modules/@prisma/debug": {
-      "version": "6.7.0",
-      "resolved": "https://registry.npmjs.org/@prisma/debug/-/debug-6.7.0.tgz",
-      "integrity": "sha512-RabHn9emKoYFsv99RLxvfG2GHzWk2ZI1BuVzqYtmMSIcuGboHY5uFt3Q3boOREM9de6z5s3bQoyKeWnq8Fz22w==",
-      "devOptional": true,
-      "license": "Apache-2.0"
+      "version": "6.8.2",
+      "resolved": "https://registry.npmjs.org/@prisma/debug/-/debug-6.8.2.tgz",
+      "integrity": "sha512-4muBSSUwJJ9BYth5N8tqts8JtiLT8QI/RSAzEogwEfpbYGFo9mYsInsVo8dqXdPO2+Rm5OG5q0qWDDE3nyUbVg==",
+      "devOptional": true
     },
     "node_modules/@prisma/engines": {
-      "version": "6.7.0",
-      "resolved": "https://registry.npmjs.org/@prisma/engines/-/engines-6.7.0.tgz",
-      "integrity": "sha512-3wDMesnOxPrOsq++e5oKV9LmIiEazFTRFZrlULDQ8fxdub5w4NgRBoxtWbvXmj2nJVCnzuz6eFix3OhIqsZ1jw==",
+      "version": "6.8.2",
+      "resolved": "https://registry.npmjs.org/@prisma/engines/-/engines-6.8.2.tgz",
+      "integrity": "sha512-XqAJ//LXjqYRQ1RRabs79KOY4+v6gZOGzbcwDQl0D6n9WBKjV7qdrbd042CwSK0v0lM9MSHsbcFnU2Yn7z8Zlw==",
       "devOptional": true,
       "hasInstallScript": true,
-      "license": "Apache-2.0",
       "dependencies": {
-        "@prisma/debug": "6.7.0",
-        "@prisma/engines-version": "6.7.0-36.3cff47a7f5d65c3ea74883f1d736e41d68ce91ed",
-        "@prisma/fetch-engine": "6.7.0",
-        "@prisma/get-platform": "6.7.0"
+        "@prisma/debug": "6.8.2",
+        "@prisma/engines-version": "6.8.0-43.2060c79ba17c6bb9f5823312b6f6b7f4a845738e",
+        "@prisma/fetch-engine": "6.8.2",
+        "@prisma/get-platform": "6.8.2"
       }
     },
     "node_modules/@prisma/engines-version": {
-      "version": "6.7.0-36.3cff47a7f5d65c3ea74883f1d736e41d68ce91ed",
-      "resolved": "https://registry.npmjs.org/@prisma/engines-version/-/engines-version-6.7.0-36.3cff47a7f5d65c3ea74883f1d736e41d68ce91ed.tgz",
-      "integrity": "sha512-EvpOFEWf1KkJpDsBCrih0kg3HdHuaCnXmMn7XFPObpFTzagK1N0Q0FMnYPsEhvARfANP5Ok11QyoTIRA2hgJTA==",
-      "devOptional": true,
-      "license": "Apache-2.0"
+      "version": "6.8.0-43.2060c79ba17c6bb9f5823312b6f6b7f4a845738e",
+      "resolved": "https://registry.npmjs.org/@prisma/engines-version/-/engines-version-6.8.0-43.2060c79ba17c6bb9f5823312b6f6b7f4a845738e.tgz",
+      "integrity": "sha512-Rkik9lMyHpFNGaLpPF3H5q5TQTkm/aE7DsGM5m92FZTvWQsvmi6Va8On3pWvqLHOt5aPUvFb/FeZTmphI4CPiQ==",
+      "devOptional": true
     },
     "node_modules/@prisma/fetch-engine": {
-      "version": "6.7.0",
-      "resolved": "https://registry.npmjs.org/@prisma/fetch-engine/-/fetch-engine-6.7.0.tgz",
-      "integrity": "sha512-zLlAGnrkmioPKJR4Yf7NfW3hftcvqeNNEHleMZK9yX7RZSkhmxacAYyfGsCcqRt47jiZ7RKdgE0Wh2fWnm7WsQ==",
+      "version": "6.8.2",
+      "resolved": "https://registry.npmjs.org/@prisma/fetch-engine/-/fetch-engine-6.8.2.tgz",
+      "integrity": "sha512-lCvikWOgaLOfqXGacEKSNeenvj0n3qR5QvZUOmPE2e1Eh8cMYSobxonCg9rqM6FSdTfbpqp9xwhSAOYfNqSW0g==",
       "devOptional": true,
-      "license": "Apache-2.0",
       "dependencies": {
-        "@prisma/debug": "6.7.0",
-        "@prisma/engines-version": "6.7.0-36.3cff47a7f5d65c3ea74883f1d736e41d68ce91ed",
-        "@prisma/get-platform": "6.7.0"
+        "@prisma/debug": "6.8.2",
+        "@prisma/engines-version": "6.8.0-43.2060c79ba17c6bb9f5823312b6f6b7f4a845738e",
+        "@prisma/get-platform": "6.8.2"
       }
     },
     "node_modules/@prisma/get-platform": {
-      "version": "6.7.0",
-      "resolved": "https://registry.npmjs.org/@prisma/get-platform/-/get-platform-6.7.0.tgz",
-      "integrity": "sha512-i9IH5lO4fQwnMLvQLYNdgVh9TK3PuWBfQd7QLk/YurnAIg+VeADcZDbmhAi4XBBDD+hDif9hrKyASu0hbjwabw==",
+      "version": "6.8.2",
+      "resolved": "https://registry.npmjs.org/@prisma/get-platform/-/get-platform-6.8.2.tgz",
+      "integrity": "sha512-vXSxyUgX3vm1Q70QwzwkjeYfRryIvKno1SXbIqwSptKwqKzskINnDUcx85oX+ys6ooN2ATGSD0xN2UTfg6Zcow==",
       "devOptional": true,
-      "license": "Apache-2.0",
       "dependencies": {
-        "@prisma/debug": "6.7.0"
+        "@prisma/debug": "6.8.2"
       }
     },
     "node_modules/@tsconfig/node10": {
@@ -618,6 +197,16 @@
         "@types/node": "*"
       }
     },
+    "node_modules/@types/cookie-parser": {
+      "version": "1.4.8",
+      "resolved": "https://registry.npmjs.org/@types/cookie-parser/-/cookie-parser-1.4.8.tgz",
+      "integrity": "sha512-l37JqFrOJ9yQfRQkljb41l0xVphc7kg5JTjjr+pLRZ0IyZ49V4BQ8vbF4Ut2C2e+WH4al3xD3ZwYwIUfnbT4NQ==",
+      "dev": true,
+      "license": "MIT",
+      "peerDependencies": {
+        "@types/express": "*"
+      }
+    },
     "node_modules/@types/cors": {
       "version": "2.8.18",
       "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.18.tgz",
@@ -660,6 +249,17 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/@types/jsonwebtoken": {
+      "version": "9.0.9",
+      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.9.tgz",
+      "integrity": "sha512-uoe+GxEuHbvy12OUQct2X9JenKM3qAscquYymuQN4fMWG9DBQtykrQEFcAbVACF7qaLw9BePSodUL0kquqBJpQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/ms": "*",
+        "@types/node": "*"
+      }
+    },
     "node_modules/@types/mime": {
       "version": "1.3.5",
       "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
@@ -667,10 +267,17 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/@types/ms": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/@types/ms/-/ms-2.1.0.tgz",
+      "integrity": "sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/@types/node": {
-      "version": "22.15.15",
-      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.15.15.tgz",
-      "integrity": "sha512-R5muMcZob3/Jjchn5LcO8jdKwSCbzqmPB6ruBxMcf9kbxtniZHP327s6C37iOfuw8mbKK3cAQa7sEl7afLrQ8A==",
+      "version": "22.15.29",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.15.29.tgz",
+      "integrity": "sha512-LNdjOkUDlU1RZb8e1kOIUpN1qQUlzGkEtbVNo53vbrwDg5om6oduhm4SiUaPW5ASTXhAiP0jInWG8Qx9fVlOeQ==",
       "dev": true,
       "license": "MIT",
       "dependencies": {
@@ -781,6 +388,29 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/bcrypt": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-6.0.0.tgz",
+      "integrity": "sha512-cU8v/EGSrnH+HnxV2z0J7/blxH8gq7Xh2JFT6Aroax7UohdmiJJlxApMxtKfuI7z68NvvVcmR78k2LbT6efhRg==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "dependencies": {
+        "node-addon-api": "^8.3.0",
+        "node-gyp-build": "^4.8.4"
+      },
+      "engines": {
+        "node": ">= 18"
+      }
+    },
+    "node_modules/bcryptjs": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-3.0.2.tgz",
+      "integrity": "sha512-k38b3XOZKv60C4E2hVsXTolJWfkGRMbILBIe2IBITXciy5bOsTKot5kDrf3ZfufQtQOUN5mXceUEpU1rTl9Uog==",
+      "license": "BSD-3-Clause",
+      "bin": {
+        "bcrypt": "bin/bcrypt"
+      }
+    },
     "node_modules/binary-extensions": {
       "version": "2.3.0",
       "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
@@ -838,6 +468,12 @@
         "node": ">=8"
       }
     },
+    "node_modules/buffer-equal-constant-time": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
+      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
+      "license": "BSD-3-Clause"
+    },
     "node_modules/bytes": {
       "version": "3.1.2",
       "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
@@ -938,6 +574,25 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/cookie-parser": {
+      "version": "1.4.7",
+      "resolved": "https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.7.tgz",
+      "integrity": "sha512-nGUvgXnotP3BsjiLX2ypbQnWoGUPIIfHQNZkkC668ntrzGWEZVW70HDEB1qnNGMicPje6EttlIgzo51YSwNQGw==",
+      "license": "MIT",
+      "dependencies": {
+        "cookie": "0.7.2",
+        "cookie-signature": "1.0.6"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/cookie-parser/node_modules/cookie-signature": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
+      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
+      "license": "MIT"
+    },
     "node_modules/cookie-signature": {
       "version": "1.2.2",
       "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.2.2.tgz",
@@ -967,6 +622,16 @@
       "dev": true,
       "license": "MIT"
     },
+    "node_modules/date-fns": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/date-fns/-/date-fns-4.1.0.tgz",
+      "integrity": "sha512-Ukq0owbQXxa/U3EGtsdVBkR1w7KOQ5gIBqdH2hkvknzZPYvBxb/aa6E8L7tmjFtkwZBu3UXBbjIgPo/Ez4xaNg==",
+      "license": "MIT",
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/kossnocorp"
+      }
+    },
     "node_modules/debug": {
       "version": "4.4.0",
       "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
@@ -1029,6 +694,15 @@
         "node": ">= 0.4"
       }
     },
+    "node_modules/ecdsa-sig-formatter": {
+      "version": "1.0.11",
+      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
+      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
+      "license": "Apache-2.0",
+      "dependencies": {
+        "safe-buffer": "^5.0.1"
+      }
+    },
     "node_modules/ee-first": {
       "version": "1.1.1",
       "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
@@ -1074,60 +748,6 @@
         "node": ">= 0.4"
       }
     },
-    "node_modules/esbuild": {
-      "version": "0.25.4",
-      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.4.tgz",
-      "integrity": "sha512-8pgjLUcUjcgDg+2Q4NYXnPbo/vncAY4UmyaCm0jZevERqCHZIaWwdJHkf8XQtu4AxSKCdvrUbT0XUr1IdZzI8Q==",
-      "devOptional": true,
-      "hasInstallScript": true,
-      "license": "MIT",
-      "bin": {
-        "esbuild": "bin/esbuild"
-      },
-      "engines": {
-        "node": ">=18"
-      },
-      "optionalDependencies": {
-        "@esbuild/aix-ppc64": "0.25.4",
-        "@esbuild/android-arm": "0.25.4",
-        "@esbuild/android-arm64": "0.25.4",
-        "@esbuild/android-x64": "0.25.4",
-        "@esbuild/darwin-arm64": "0.25.4",
-        "@esbuild/darwin-x64": "0.25.4",
-        "@esbuild/freebsd-arm64": "0.25.4",
-        "@esbuild/freebsd-x64": "0.25.4",
-        "@esbuild/linux-arm": "0.25.4",
-        "@esbuild/linux-arm64": "0.25.4",
-        "@esbuild/linux-ia32": "0.25.4",
-        "@esbuild/linux-loong64": "0.25.4",
-        "@esbuild/linux-mips64el": "0.25.4",
-        "@esbuild/linux-ppc64": "0.25.4",
-        "@esbuild/linux-riscv64": "0.25.4",
-        "@esbuild/linux-s390x": "0.25.4",
-        "@esbuild/linux-x64": "0.25.4",
-        "@esbuild/netbsd-arm64": "0.25.4",
-        "@esbuild/netbsd-x64": "0.25.4",
-        "@esbuild/openbsd-arm64": "0.25.4",
-        "@esbuild/openbsd-x64": "0.25.4",
-        "@esbuild/sunos-x64": "0.25.4",
-        "@esbuild/win32-arm64": "0.25.4",
-        "@esbuild/win32-ia32": "0.25.4",
-        "@esbuild/win32-x64": "0.25.4"
-      }
-    },
-    "node_modules/esbuild-register": {
-      "version": "3.6.0",
-      "resolved": "https://registry.npmjs.org/esbuild-register/-/esbuild-register-3.6.0.tgz",
-      "integrity": "sha512-H2/S7Pm8a9CL1uhp9OvjwrBh5Pvx0H8qVOxNu8Wed9Y7qv56MPtq+GGM8RJpq6glYJn9Wspr8uw7l55uyinNeg==",
-      "devOptional": true,
-      "license": "MIT",
-      "dependencies": {
-        "debug": "^4.3.4"
-      },
-      "peerDependencies": {
-        "esbuild": ">=0.12 <1"
-      }
-    },
     "node_modules/escape-html": {
       "version": "1.0.3",
       "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
@@ -1185,6 +805,27 @@
         "url": "https://opencollective.com/express"
       }
     },
+    "node_modules/express-async-handler": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/express-async-handler/-/express-async-handler-1.2.0.tgz",
+      "integrity": "sha512-rCSVtPXRmQSW8rmik/AIb2P0op6l7r1fMW538yyvTMltCO4xQEWMmobfrIxN2V1/mVrgxB8Az3reYF6yUZw37w==",
+      "license": "MIT"
+    },
+    "node_modules/express-rate-limit": {
+      "version": "7.5.0",
+      "resolved": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-7.5.0.tgz",
+      "integrity": "sha512-eB5zbQh5h+VenMPM3fh+nw1YExi5nMr6HUCR62ELSP11huvxm/Uir1H1QEyTkk5QX6A58pX6NmaTMceKZ0Eodg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 16"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/express-rate-limit"
+      },
+      "peerDependencies": {
+        "express": "^4.11 || 5 || ^5.0.0-beta.1"
+      }
+    },
     "node_modules/fill-range": {
       "version": "7.1.1",
       "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
@@ -1353,6 +994,15 @@
         "node": ">= 0.4"
       }
     },
+    "node_modules/helmet": {
+      "version": "8.1.0",
+      "resolved": "https://registry.npmjs.org/helmet/-/helmet-8.1.0.tgz",
+      "integrity": "sha512-jOiHyAZsmnr8LqoPGmCjYAaiuWwjAPLgY8ZX2XrmHawt99/u1y6RgrZMTeoPfpUbV96HOalYgz1qzkRbw54Pmg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=18.0.0"
+      }
+    },
     "node_modules/http-errors": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
@@ -1455,6 +1105,100 @@
       "integrity": "sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ==",
       "license": "MIT"
     },
+    "node_modules/jiti": {
+      "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/jiti/-/jiti-2.4.2.tgz",
+      "integrity": "sha512-rg9zJN+G4n2nfJl5MW3BMygZX56zKPNVEYYqq7adpmMh4Jn2QNEwhvQlFy6jPVdcod7txZtKHWnyZiA3a0zP7A==",
+      "devOptional": true,
+      "bin": {
+        "jiti": "lib/jiti-cli.mjs"
+      }
+    },
+    "node_modules/jsonwebtoken": {
+      "version": "9.0.2",
+      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
+      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
+      "license": "MIT",
+      "dependencies": {
+        "jws": "^3.2.2",
+        "lodash.includes": "^4.3.0",
+        "lodash.isboolean": "^3.0.3",
+        "lodash.isinteger": "^4.0.4",
+        "lodash.isnumber": "^3.0.3",
+        "lodash.isplainobject": "^4.0.6",
+        "lodash.isstring": "^4.0.1",
+        "lodash.once": "^4.0.0",
+        "ms": "^2.1.1",
+        "semver": "^7.5.4"
+      },
+      "engines": {
+        "node": ">=12",
+        "npm": ">=6"
+      }
+    },
+    "node_modules/jwa": {
+      "version": "1.4.2",
+      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
+      "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
+      "license": "MIT",
+      "dependencies": {
+        "buffer-equal-constant-time": "^1.0.1",
+        "ecdsa-sig-formatter": "1.0.11",
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/jws": {
+      "version": "3.2.2",
+      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
+      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
+      "license": "MIT",
+      "dependencies": {
+        "jwa": "^1.4.1",
+        "safe-buffer": "^5.0.1"
+      }
+    },
+    "node_modules/lodash.includes": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
+      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.isboolean": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
+      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.isinteger": {
+      "version": "4.0.4",
+      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
+      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.isnumber": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
+      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.isplainobject": {
+      "version": "4.0.6",
+      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
+      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.isstring": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
+      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
+      "license": "MIT"
+    },
+    "node_modules/lodash.once": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
+      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
+      "license": "MIT"
+    },
     "node_modules/make-error": {
       "version": "1.3.6",
       "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
@@ -1541,6 +1285,26 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/node-addon-api": {
+      "version": "8.3.1",
+      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-8.3.1.tgz",
+      "integrity": "sha512-lytcDEdxKjGJPTLEfW4mYMigRezMlyJY8W4wxJK8zE533Jlb8L8dRuObJFWg2P+AuOIxoCgKF+2Oq4d4Zd0OUA==",
+      "license": "MIT",
+      "engines": {
+        "node": "^18 || ^20 || >= 21"
+      }
+    },
+    "node_modules/node-gyp-build": {
+      "version": "4.8.4",
+      "resolved": "https://registry.npmjs.org/node-gyp-build/-/node-gyp-build-4.8.4.tgz",
+      "integrity": "sha512-LA4ZjwlnUblHVgq0oBF3Jl/6h/Nvs5fzBLwdEF4nuxnFdsfajde4WfxtJr3CaiH+F6ewcIB/q4jQ4UzPyid+CQ==",
+      "license": "MIT",
+      "bin": {
+        "node-gyp-build": "bin.js",
+        "node-gyp-build-optional": "optional.js",
+        "node-gyp-build-test": "build-test.js"
+      }
+    },
     "node_modules/nodemon": {
       "version": "3.1.10",
       "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.10.tgz",
@@ -1654,15 +1418,14 @@
       }
     },
     "node_modules/prisma": {
-      "version": "6.7.0",
-      "resolved": "https://registry.npmjs.org/prisma/-/prisma-6.7.0.tgz",
-      "integrity": "sha512-vArg+4UqnQ13CVhc2WUosemwh6hr6cr6FY2uzDvCIFwH8pu8BXVv38PktoMLVjtX7sbYThxbnZF5YiR8sN2clw==",
+      "version": "6.8.2",
+      "resolved": "https://registry.npmjs.org/prisma/-/prisma-6.8.2.tgz",
+      "integrity": "sha512-JNricTXQxzDtRS7lCGGOB4g5DJ91eg3nozdubXze3LpcMl1oWwcFddrj++Up3jnRE6X/3gB/xz3V+ecBk/eEGA==",
       "devOptional": true,
       "hasInstallScript": true,
-      "license": "Apache-2.0",
       "dependencies": {
-        "@prisma/config": "6.7.0",
-        "@prisma/engines": "6.7.0"
+        "@prisma/config": "6.8.2",
+        "@prisma/engines": "6.8.2"
       },
       "bin": {
         "prisma": "build/index.js"
@@ -1670,9 +1433,6 @@
       "engines": {
         "node": ">=18.18"
       },
-      "optionalDependencies": {
-        "fsevents": "2.3.3"
-      },
       "peerDependencies": {
         "typescript": ">=5.1.0"
       },
@@ -1800,7 +1560,6 @@
       "version": "7.7.1",
       "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
       "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
-      "dev": true,
       "license": "ISC",
       "bin": {
         "semver": "bin/semver.js"
@@ -2117,6 +1876,15 @@
       "engines": {
         "node": ">=6"
       }
+    },
+    "node_modules/zod": {
+      "version": "3.25.42",
+      "resolved": "https://registry.npmjs.org/zod/-/zod-3.25.42.tgz",
+      "integrity": "sha512-PcALTLskaucbeHc41tU/xfjfhcz8z0GdhhDcSgrCTmSazUuqnYqiXO63M0QUBVwpBlsLsNVn5qHSC5Dw3KZvaQ==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/colinhacks"
+      }
     }
   }
 }
diff --git a/backend/package.json b/backend/package.json
index 7d02082..54fbb08 100644
--- a/backend/package.json
+++ b/backend/package.json
@@ -1,10 +1,12 @@
 {
   "devDependencies": {
+    "@types/cookie-parser": "^1.4.8",
     "@types/cors": "^2.8.18",
     "@types/express": "^5.0.1",
-    "@types/node": "^22.15.15",
+    "@types/jsonwebtoken": "^9.0.9",
+    "@types/node": "^22.15.29",
     "nodemon": "^3.1.10",
-    "prisma": "^6.7.0",
+    "prisma": "^6.8.2",
     "ts-node": "^10.9.2",
     "typescript": "^5.8.3"
   },
@@ -13,10 +15,22 @@
     "build": "tsc",
     "start": "node dist/app.js"
   },
+  "prisma": {
+    "seed": "ts-node prisma/seed.ts"
+  },
   "dependencies": {
     "@prisma/client": "^6.7.0",
+    "bcrypt": "^6.0.0",
+    "bcryptjs": "^3.0.2",
+    "cookie-parser": "^1.4.7",
     "cors": "^2.8.5",
+    "date-fns": "^4.1.0",
     "dotenv": "^16.5.0",
-    "express": "^5.1.0"
+    "express": "^5.1.0",
+    "express-async-handler": "^1.2.0",
+    "express-rate-limit": "^7.5.0",
+    "helmet": "^8.1.0",
+    "jsonwebtoken": "^9.0.2",
+    "zod": "^3.25.42"
   }
 }
diff --git a/backend/prisma/migrations/20250602191526_init_schema/migration.sql b/backend/prisma/migrations/20250602191526_init_schema/migration.sql
new file mode 100644
index 0000000..8e59605
--- /dev/null
+++ b/backend/prisma/migrations/20250602191526_init_schema/migration.sql
@@ -0,0 +1,44 @@
+-- CreateTable
+CREATE TABLE "User" (
+    "id" SERIAL NOT NULL,
+    "username" TEXT NOT NULL,
+    "email" TEXT NOT NULL,
+    "password" TEXT NOT NULL,
+    "role" TEXT NOT NULL,
+    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
+    "updatedAt" TIMESTAMP(3) NOT NULL,
+
+    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
+);
+
+-- CreateTable
+CREATE TABLE "Log" (
+    "id" SERIAL NOT NULL,
+    "event" TEXT NOT NULL,
+    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
+
+    CONSTRAINT "Log_pkey" PRIMARY KEY ("id")
+);
+
+-- CreateTable
+CREATE TABLE "RefreshToken" (
+    "id" SERIAL NOT NULL,
+    "token" TEXT NOT NULL,
+    "userId" INTEGER NOT NULL,
+    "expiresAt" TIMESTAMP(3) NOT NULL,
+    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
+
+    CONSTRAINT "RefreshToken_pkey" PRIMARY KEY ("id")
+);
+
+-- CreateIndex
+CREATE UNIQUE INDEX "User_username_key" ON "User"("username");
+
+-- CreateIndex
+CREATE UNIQUE INDEX "User_email_key" ON "User"("email");
+
+-- CreateIndex
+CREATE UNIQUE INDEX "RefreshToken_token_key" ON "RefreshToken"("token");
+
+-- AddForeignKey
+ALTER TABLE "RefreshToken" ADD CONSTRAINT "RefreshToken_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;
diff --git a/backend/prisma/migrations/20250603014423_add_reset_token_fields/migration.sql b/backend/prisma/migrations/20250603014423_add_reset_token_fields/migration.sql
new file mode 100644
index 0000000..f5955ec
--- /dev/null
+++ b/backend/prisma/migrations/20250603014423_add_reset_token_fields/migration.sql
@@ -0,0 +1,3 @@
+-- AlterTable
+ALTER TABLE "User" ADD COLUMN     "resetToken" TEXT,
+ADD COLUMN     "resetTokenExpires" TIMESTAMP(3);
diff --git a/backend/prisma/migrations/migration_lock.toml b/backend/prisma/migrations/migration_lock.toml
new file mode 100644
index 0000000..044d57c
--- /dev/null
+++ b/backend/prisma/migrations/migration_lock.toml
@@ -0,0 +1,3 @@
+# Please do not edit this file manually
+# It should be added in your version-control system (e.g., Git)
+provider = "postgresql"
diff --git a/backend/prisma/schema.prisma b/backend/prisma/schema.prisma
index 39dca49..a73efc1 100644
--- a/backend/prisma/schema.prisma
+++ b/backend/prisma/schema.prisma
@@ -15,17 +15,29 @@ datasource db {
 }
 
 model User {
-    id          Int         @id @default(autoincrement())
-    username    String      @unique
-    email       String      @unique
-    password    String
-    role        String
-    createdAt   DateTime    @default(now())
-    updatedAt   DateTime    @updatedAt
+  id                Int            @id @default(autoincrement())
+  username          String         @unique
+  email             String         @unique
+  password          String
+  role              String
+  resetToken        String?
+  resetTokenExpires DateTime?
+  createdAt         DateTime       @default(now())
+  updatedAt         DateTime       @updatedAt
+  refreshTokens     RefreshToken[]
 }
 
 model Log {
-    id          Int         @id @default(autoincrement())
-    event       String
-    createdAt   DateTime    @default(now())
+  id        Int      @id @default(autoincrement())
+  event     String
+  createdAt DateTime @default(now())
+}
+
+model RefreshToken {
+  id        Int      @id @default(autoincrement())
+  token     String   @unique
+  userId    Int
+  user      User     @relation(fields: [userId], references: [id])
+  expiresAt DateTime
+  createdAt DateTime @default(now())
 }
diff --git a/backend/prisma/seed.ts b/backend/prisma/seed.ts
new file mode 100644
index 0000000..0418b2c
--- /dev/null
+++ b/backend/prisma/seed.ts
@@ -0,0 +1,57 @@
+import { PrismaClient } from '@prisma/client';
+import bcrypt from 'bcryptjs';
+
+const prisma = new PrismaClient();
+
+async function main() {
+  await prisma.user.createMany({
+    data: [
+      {
+        id: 1,
+        username: 'testuser',
+        email: 'testuser@example.com',
+        password: await bcrypt.hash('Pa55word!', 12),
+        role: 'user',
+      },
+      {
+        id: 2,
+        username: 'Facob',
+        email: 'fakeuser@notrealsite.com',
+        password: await bcrypt.hash('abc123', 12),
+        role: 'user',
+      },
+      {
+        id: 3,
+        username: 'anotherfakeuser',
+        email: 'somanyfakeemails@fakeemail.com',
+        password: await bcrypt.hash('newpassword', 12),
+        role: 'user',
+      },
+      {
+        id: 4,
+        username: 'Admin',
+        email: 'admin@authix.com',
+        password: await bcrypt.hash('adminsrule', 12),
+        role: 'admin',
+      },
+      {
+        id: 5,
+        username: 'newadmin',
+        email: 'newadmin@authix.com',
+        password: await bcrypt.hash('abc123', 12),
+        role: 'user',
+      },
+    ],
+    skipDuplicates: true,
+  });
+}
+
+main()
+  .then(() => {
+    console.log('🌱 Seed complete');
+    return prisma.$disconnect();
+  })
+  .catch((e) => {
+    console.error('❌ Seed failed', e);
+    return prisma.$disconnect();
+  });
diff --git a/backend/scripts/createAdmin.ts b/backend/scripts/createAdmin.ts
new file mode 100644
index 0000000..91af5dc
--- /dev/null
+++ b/backend/scripts/createAdmin.ts
@@ -0,0 +1,21 @@
+import prisma from '../src/prisma/client';
+import bcrypt from 'bcryptjs';
+
+async function createAdmin() {
+    const hashedPassword = await bcrypt.hash('abcd1234', 12);
+    await prisma.user.create({
+        data: {
+            username: 'admin',
+            email: 'admin@authix.com',
+            password: hashedPassword,
+            role: 'admin',
+        },
+    });
+
+    console.log('Admin user created.');
+}
+
+createAdmin().catch((error) => {
+    console.error(error);
+    process.exit(1);
+});
\ No newline at end of file
diff --git a/backend/src/app.ts b/backend/src/app.ts
index 8e1c893..fbbe46b 100644
--- a/backend/src/app.ts
+++ b/backend/src/app.ts
@@ -1,13 +1,61 @@
 import express from 'express';
 import cors from 'cors';
 import authRoutes from './routes/auth.routes';
+import dotenv from 'dotenv';
+import cookieParser from 'cookie-parser';
+import helmet from 'helmet';
+import rateLimit from 'express-rate-limit';
+
+dotenv.config();
 
 const app = express();
 const PORT = process.env.PORT || 3000;
 
-// Middleware
-app.use(cors());
+// Middleware: Security headers
+app.use(helmet());
+
+// Middleware: Content Security Policy (CSP)
+app.use(
+  helmet.contentSecurityPolicy({
+    directives: {
+      defaultSrc: ["'self'"],
+      scriptSrc: ["'self'"],
+      styleSrc: ["'self'"],
+      imgSrc: ["'self'", 'data:'],
+      connectSrc: ["'self'", 'http://localhost:5173'],
+      objectSrc: ["'none'"],
+      baseUri: ["'self'"],
+      frameAncestors: ["'none'"],
+      fontSrc: ["'self'"],
+      formAction: ["'self'"],
+      scriptSrcAttr: ["'none'"],
+      upgradeInsecureRequests: [],
+    },
+  })
+);
+
+// Middleware: CORS
+app.use(
+  cors({
+    origin: 'http://localhost:5173',
+    credentials: true,
+  })
+);
+
+// Middleware: Body parsing and cookies
 app.use(express.json());
+app.use(cookieParser());
+
+// Middleware: Serve static files
+app.use(express.static('static'));
+
+// Middleware: Rate limiting (global)
+const globalLimiter = rateLimit({
+  windowMs: 15 * 60 * 1000, // 15 minutes
+  max: 100,
+  message: 'Too many requests, please try again later.',
+});
+app.use(globalLimiter);
 
 // Routes
 app.use('/auth', authRoutes);
diff --git a/backend/src/controllers/auth/auth.controller.ts b/backend/src/controllers/auth/auth.controller.ts
index f064692..336e3cb 100644
--- a/backend/src/controllers/auth/auth.controller.ts
+++ b/backend/src/controllers/auth/auth.controller.ts
@@ -1,20 +1,39 @@
 import { Request, Response } from 'express';
+import bcrypt from 'bcryptjs';
+import crypto from 'crypto';
+import { addMinutes } from 'date-fns';
+import { z } from 'zod';
+import jwt from 'jsonwebtoken';
 import prisma from '../../prisma/client';
+import { comparePassword, generateToken } from '../../utils/auth.utils';
+import { validateRefreshToken, rotateRefreshToken, generateAccessToken, generateRefreshToken } from '../../utils/token.utils';
 
-export const registerUser = async (req: Request, res: Response) => {
-    console.log('Incoming body:', req.body);
+const registerSchema = z.object({
+    username: z.string().min(3).max(30),
+    email: z.string().email(),
+    password: z.string().min(8),
+});
 
-    const { username, email, password } = req.body;
+export const registerUser = async (req: Request, res: Response): Promise<void> => {
+    try {
+        const { username, email, password } = registerSchema.parse(req.body);
 
-    console.log('Registering user:', { username, email, password, role: 'user' });
+        const existing = await prisma.user.findFirst({
+            where: { OR: [{ email }, { username }] },
+        });
+
+        if (existing) {
+            res.status(409).json({ error: 'user already exists' });
+            return;
+        }
+
+        const hashedPassword = await bcrypt.hash(password, 12);
 
-    // Insecure logic: no input validation, no hashing
-    try {
         const user = await prisma.user.create({
             data: {
                 username,
                 email,
-                password,
+                password: hashedPassword,
                 role: 'user'
             },
         });
@@ -25,8 +44,7 @@ export const registerUser = async (req: Request, res: Response) => {
             },
         });
 
-        // Auto generate fake token
-        const token = `user-${user.id}`;
+        const token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET!, {expiresIn: '1h' });
 
         res.status(201).json({
             message: 'User created',
@@ -40,23 +58,24 @@ export const registerUser = async (req: Request, res: Response) => {
         });
     } catch (error) {
         console.error('Prisma error:', error);
-        res.status(400).json({ error: 'Unable to create user', details: (error as any).message });
+        // res.status(400).json({ error: 'Unable to create user', details: (error as any).message });
+        res.status(400).json({ error: 'Unable to create user', details: error });
     }
 };
 
-export const loginUser = async (req: Request, res: Response) => {
+export const loginUser = async (req: Request, res: Response): Promise<void> => {
     const { username, password } = req.body;
 
+    console.log('Login attempt: ', { username, password });
+
     try {
         const user = await prisma.user.findUnique({
             where: { username },
         });
 
-        if (!user || user.password !== password) {
+        if (!user || !(await comparePassword(password, user.password))) {
             await prisma.log.create({
-                data: {
-                    event: `Failed login attempt for: ${username}`,
-                },
+                data: { event: `Failed login attempt for: ${username}.` },
             });
 
             res.status(401).json({ error: 'Invalid username or password' });
@@ -64,36 +83,53 @@ export const loginUser = async (req: Request, res: Response) => {
         }
 
         await prisma.log.create({
-            data: {
-                event: `Successful login for: ${username}`,
-            },
+            data: { event: `Successful login for: ${username}.` },
         });
 
-        res.json({ message: 'Login successful', token: `user-${user.id}`, role: user.role });
+        const accessToken = generateAccessToken({ id: user.id, role: user.role });
+        const refreshToken = await generateRefreshToken(user.id);
+
+        res
+            .cookie('refreshToken', refreshToken, {
+                httpOnly: true,
+                secure: process.env.NODE_ENV === 'production',
+                sameSite: 'strict',
+                maxAge: 6 * 24 * 60 * 60 * 1000, // 7 days
+            })
+            .json({
+                message: 'Login successful',
+                accessToken,
+                user: {
+                    id: user.id,
+                    username: user.username,
+                    email: user.email,
+                    role: user.role,
+                },
+            });
     } catch (error) {
         console.error('Login error', error);
-        res.status(500).json({ error: 'Login failed', details: (error as any).message });
+        res.status(500).json({ error: 'Login failed' });
     }
 };
 
-export const getCurrentUser = async (req: Request, res: Response) => {
+export const getCurrentUser = async (req: Request, res: Response): Promise<void> => {
     const authHeader = req.headers.authorization;
 
-    if (!authHeader || !authHeader.startsWith('Bearer user-')) {
-        return res.status(401).json({ error: 'Unauthorized' });
-    }
+    const userPayload = (req as any).user;
 
-    const userId = parseInt(authHeader.replace('Bearer user-', ''));
-
-    if (isNaN(userId)) {
-        return res.status(401).json({ error: 'Invalid token format' });
+    if (!userPayload || !userPayload.id) {
+        res.status(401).json({ error: 'Unauthorized' });
+        return;
     }
 
     try {
-        const user  = await prisma.user.findUnique({ where: { id: userId }});
+        const user = await prisma.user.findUnique({
+            where: { id: userPayload.id },
+        });
 
         if (!user) {
-            return res.status(404).json({ error: 'User not found' });
+            res.status(404).json({ error: 'User not found' });
+            return;
         }
 
         res.json({
@@ -104,7 +140,7 @@ export const getCurrentUser = async (req: Request, res: Response) => {
         });
     } catch (error) {
         console.error('Get current user error:', error);
-        res.status(500).json({ error: 'Failed to fetch current user', details: (error as any).message});
+        res.status(500).json({ error: 'Failed to fetch user.' });
     }
 };
 
@@ -116,18 +152,42 @@ export const getCurrentUser = async (req: Request, res: Response) => {
 // -- blacklisting on logout
 // -- storing in HTTP-only cookies
 
-export const refreshToken = (req: Request, res: Response) => {
-    const { token } = req.body;
+export const refreshToken = async (req: Request, res: Response): Promise<void> => {
+    try {
+        const token = req.cookies?.refreshToken;
 
-    if (token !== 'fake-jwt-token') {
-        res.status(401).json({ error: 'Invalid refresh token' });
+        if (!token) {
+            res.status(400).json({ error: 'Refresh token is required.' });
+            return;
+    }
+
+    const user = await validateRefreshToken(token);
+
+    if (!user) {
+        res.status(401).json({ error: 'Invalid or expired refresh token.' });
         return;
     }
 
-    res.json({ token: 'fake-jwt-token-refreshed' });
+    const newAccessToken = generateAccessToken({ id: user.id, role: user.role });
+    const newRefreshToken = await rotateRefreshToken(token, user.id);
+
+    res
+        .cookie('refreshToken', newRefreshToken, {
+            httpOnly: true,
+            secure: process.env.NODE_ENV === 'production',
+            sameSite: 'strict',
+            maxAge: 7 * 24 * 60 * 60 * 1000,
+        })
+        .json({ accessToken: newAccessToken });
+    } catch (error) {
+        console.error('Refresh token error: ', error);
+        res.status(500).json({ error: 'Internal server error.' });
+    }
 };
 
-export const requestPasswordReset = async (req: Request, res: Response) => {
+
+
+export const requestPasswordReset = async (req: Request, res: Response): Promise<void> => {
     const { email } = req.body;
 
     if (!email) {
@@ -135,55 +195,77 @@ export const requestPasswordReset = async (req: Request, res: Response) => {
         return;
     }
 
-    // Insecure: we generate a fake token and just return it instead of emailing
-    const fakeResetToken = 'reset-token-12345';
+    const user = await prisma.user.findUnique({ where: { email } });
+
+    if (!user) {
+        res.status(404).json({ error: 'No user with that email' });
+        return;
+    }
+
+    const token = crypto.randomBytes(32).toString('hex');
+    const expires = addMinutes(new Date(), 15);
 
-    console.log(`Password reset requested for ${email}`);
+    await prisma.user.update({
+        where: { id: user.id },
+        data: {
+            resetToken: token,
+            resetTokenExpires: expires,
+        },
+    });
 
     await prisma.log.create({
         data: {
-            event: `Password reset requested for email: ${email}`,
+            event: `Password reset requested for email: ${email}.`,
         },
     });
 
-    res.json({ message: 'Password reset token generated', resetToken: fakeResetToken });
+    res.json({
+        message: 'Password reset link generated',
+        resetToken: token,
+    });
 };
 
-export const resetPassword = async (req: Request, res: Response) => {
-    const { token, newPassword } = req.body;
+export const resetPassword = async (req: Request, res: Response): Promise<void> => {
+   try {
+        const { token, newPassword } = req.body;
 
-    if (token !== 'reset-token-12345') {
-        res.status(400).json({ error: 'Invalid or expired reset token' });
+        const user = await prisma.user.findFirst({
+            where: {
+                resetToken: token,
+                resetTokenExpires: { gt: new Date() },
+            },
+    });
+
+    if (!user) {
+        res.status(400).json({ error: 'Invalid or expired reset token.' });
         return;
     }
 
-    try {
-        const user = await prisma.user.findFirst(); // Insecure: resets password for first user
+    const hashedPassword = await bcrypt.hash(newPassword, 12);
 
-        if (!user) {
-            res.status(404).json({ error: 'No user found to reset password' });
-            return;
-        }
-
-        const updated = await prisma.user.update({
-            where: { id: user.id },
-            data: { password: newPassword },
-        });
+    await prisma.user.update({
+        where: { id: user.id },
+        data: {
+            password: hashedPassword,
+            resetToken: null,
+            resetTokenExpires: null,
+        },
+    });
 
-        await prisma.log.create({
-            data: {
-                event: `Password reset for user: ${user.username}`,
-            },
-        });
+    await prisma.log.create({
+        data: {
+            event: `Password reset for user: ${user.username}`,
+        },
+    });
 
-        res.json({ message: 'Password reset successful', user: updated });
-    } catch (error) {
-        console.error('Reset password error:', error);
-        res.status(500).json({ error: 'Failed to reset password', details: (error as any).message });
-    }
+    res.json({ message: 'Password reset successful.' });
+   } catch (error) {
+        console.error('Reset password error: ', error);
+        res.status(500).json({ error: 'Failed to reset password.' });
+   };
 };
 
-export const listUsers = async (req: Request, res: Response) => {
+export const listUsers = async (req: Request, res: Response): Promise<void> => {
     try {
         const users = await prisma.user.findMany();
         res.json({ users });
@@ -193,12 +275,68 @@ export const listUsers = async (req: Request, res: Response) => {
     }
 };
 
-export const listLogs = async (req: Request, res: Response) => {
+export const listLogs = async (req: Request, res: Response): Promise<void> => {
     try {
         const logs = await prisma.log.findMany({ orderBy: { createdAt: 'desc'} });
         res.json({ logs });
     } catch (error) {
         console.error('List logs error:', error);
-        res.status(500).json({ error: 'Failed to fetch logs', details: (error as any).message });
+        // res.status(500).json({ error: 'Failed to fetch logs', details: (error as any).message });
+        res.status(401).json({ error: 'Failed to fetch logs.', details: error });
     }
 };
+
+export const logoutUser = async (req: Request, res: Response): Promise<void> => {
+    const token = req.cookies.refreshToken;
+
+    if (!token) {
+        res.status(400).json({ error: 'Refresh token is required for logout.' });
+        return;
+    }
+
+    try {
+        await prisma.refreshToken.delete({
+            where: { token },
+        });
+
+        res
+            .clearCookie('refreshToken', {
+                httpOnly: true,
+                secure: process.env.NODE_ENV === 'production',
+                sameSite: 'strict',
+        })
+
+            .json({ message: 'Logged out successfully' });
+
+    } catch (error) {
+        console.error('Logout error:', error);
+        res.status(400).json({ error: 'Token not found or already invalidated' });
+    }
+
+}
+
+export const logoutAllSessions = async (req: Request, res: Response): Promise<void> => {
+    const userPayload = (req as any).user;
+
+    if (!userPayload || !userPayload.id) {
+        res.status(401).json({ error: 'Unauthorized' });
+        return;
+    }
+
+    try {
+        await prisma.refreshToken.deleteMany({
+            where: { userId: userPayload.id },
+        });
+
+        res
+            .clearCookie('refreskToken', {
+                httpOnly: true,
+                secure: process.env.NODE_ENV === 'production',
+                sameSite: 'strict',
+            })
+            .json({ message: 'All sessions revoked.' });
+    } catch (error) {
+        console.error('Logout all error: ', error);
+        res.status(500).json({ error: 'Failed to revoke sessions.' });
+    }
+}
\ No newline at end of file
diff --git a/backend/src/middleware/auth.middleware.ts b/backend/src/middleware/auth.middleware.ts
new file mode 100644
index 0000000..fe2f3e2
--- /dev/null
+++ b/backend/src/middleware/auth.middleware.ts
@@ -0,0 +1,28 @@
+import { Request, Response, NextFunction } from 'express';
+import jwt from 'jsonwebtoken';
+
+export const requireAuth = (req: Request, res: Response, next: NextFunction) => {
+    const authHeader = req.headers.authorization;
+
+    if (!authHeader || !authHeader.startsWith('Bearer ')) {
+        return res.status(401).json({ error: 'Missing or invalid authorization header.' });
+    }
+
+    const token = authHeader.replace('Bearer ', '');
+
+    try {
+        const decoded = jwt.verify(token, process.env.JWT_SECRET as string);
+        (req as any).user = decoded;
+        next();
+    } catch (err) {
+        return res.status(401).json({ error: 'Invalid or expired token' });
+    }
+};
+
+export const requireAdmin = (req: Request, res: Response, next: NextFunction) => {
+    const user = (req as any).user;
+    if (!user || user.role !== 'admin') {
+        return res.status(403).json({ error: 'Admin privileges required.' });
+    }
+    next();
+};
diff --git a/backend/src/routes/auth.routes.ts b/backend/src/routes/auth.routes.ts
index 8f17405..dae298c 100644
--- a/backend/src/routes/auth.routes.ts
+++ b/backend/src/routes/auth.routes.ts
@@ -1,20 +1,33 @@
-import { Router, Request, Response, NextFunction } from 'express';
-import { registerUser, loginUser, getCurrentUser, refreshToken, requestPasswordReset, resetPassword, listUsers, listLogs } from '../controllers/auth/auth.controller';
+import { Router, Request, Response, NextFunction, RequestHandler } from 'express';
+import asyncHandler from 'express-async-handler'
+import { wrapMiddleware } from '../utils/wrapMiddleware';
+import { requireAdmin, requireAuth } from '../middleware/auth.middleware';
+import { registerUser, loginUser, getCurrentUser, refreshToken, requestPasswordReset, resetPassword, listUsers, listLogs, logoutUser, logoutAllSessions } from '../controllers/auth/auth.controller';
+import rateLimit from 'express-rate-limit';
 
 const router = Router();
 
-// Helper function to handle async route handlers in Express 5
-const asyncHandler = (fn: any) => (req: Request, res: Response, next: NextFunction) => {
-  return Promise.resolve(fn(req, res, next)).catch(next);
-};
+const loginLimiter = rateLimit({
+    windowMs: 5 * 60 * 1000, // 5 minutes
+    max: 5,
+    message: 'Too many login attempts, please try again later.',
+});
 
+// Public routes
 router.post('/register', asyncHandler(registerUser));
-router.post('/login', asyncHandler(loginUser));
-router.get('/me', asyncHandler(getCurrentUser));
-router.post('/refresh', refreshToken);
+router.post('/login', loginLimiter, asyncHandler(loginUser));
+router.post('/refresh', asyncHandler(refreshToken));
 router.post('/request-password-reset', asyncHandler(requestPasswordReset));
 router.post('/reset-password', asyncHandler(resetPassword));
-router.get('/admin/users', asyncHandler(listUsers));
-router.get('/admin/logs', asyncHandler(listLogs));
+
+// Authenticated user route
+router.get('/me', wrapMiddleware(requireAuth), asyncHandler(getCurrentUser));
+router.get('/logout', asyncHandler(logoutUser));
+router.post('/logout-all', wrapMiddleware(requireAuth), asyncHandler(logoutAllSessions));
+
+
+// Admin-only routes
+router.get('/admin/users', wrapMiddleware(requireAuth), wrapMiddleware(requireAdmin), asyncHandler(listUsers));
+router.get('/admin/logs', wrapMiddleware(requireAuth), wrapMiddleware(requireAdmin), asyncHandler(listLogs));
 
 export default router;
\ No newline at end of file
diff --git a/backend/src/utils/auth.utils.ts b/backend/src/utils/auth.utils.ts
new file mode 100644
index 0000000..b6d536c
--- /dev/null
+++ b/backend/src/utils/auth.utils.ts
@@ -0,0 +1,20 @@
+import bcrypt from 'bcryptjs';
+import jwt from 'jsonwebtoken';
+
+const SALT_ROUNDS = 12;
+
+export const hashPassword = (password: string): Promise<string> => {
+    return bcrypt.hash(password, SALT_ROUNDS);
+};
+
+export const comparePassword = (password: string, hash: string): Promise<boolean> => {
+    return bcrypt.compare(password, hash);
+};
+
+export const generateToken = (payload: object): string => {
+    return jwt.sign(payload, process.env.JWT_SECRET as string, { expiresIn: '1h' });
+};
+
+export const verifyToken = (token: string): any => {
+    return jwt.verify(token, process.env.JWT_SECRET as string);
+};
\ No newline at end of file
diff --git a/backend/src/utils/token.utils.ts b/backend/src/utils/token.utils.ts
new file mode 100644
index 0000000..1d200b1
--- /dev/null
+++ b/backend/src/utils/token.utils.ts
@@ -0,0 +1,45 @@
+import jwt from 'jsonwebtoken';
+import crypto from 'crypto';
+import { addDays } from 'date-fns';
+import prisma from '../prisma/client';
+
+const ACCESS_TOKEN_EXPIRY = '15m'; // short-lived access token
+const REFRESH_TOKEN_EXPIRY_DAYS = 7;
+
+export const generateAccessToken = (payload: object): string => {
+    return jwt.sign(payload, process.env.JWT_SECRET!, { expiresIn: ACCESS_TOKEN_EXPIRY });
+};
+
+export const generateRefreshToken = async (userId: number): Promise<string> => {
+    const token = crypto.randomBytes(40).toString('hex');
+    const expiresAt = addDays(new Date(), REFRESH_TOKEN_EXPIRY_DAYS);
+
+    await prisma.refreshToken.create({
+        data: {
+            token,
+            userId,
+            expiresAt,
+        },
+    });
+
+    return token;
+};
+
+export const validateRefreshToken = async (token: string) => {
+    const record = await prisma.refreshToken.findUnique({
+        where: { token },
+        include: { user: true },
+    });
+
+    if (!record || record.expiresAt < new Date()) {
+        return null;
+    }
+
+    return record.user;
+};
+
+export const rotateRefreshToken = async (oldToken: string, userId: number): Promise<string> => {
+    await prisma.refreshToken.delete({ where: {token: oldToken } });
+
+    return await generateRefreshToken(userId);
+}
\ No newline at end of file
diff --git a/backend/src/utils/wrapMiddleware.ts b/backend/src/utils/wrapMiddleware.ts
new file mode 100644
index 0000000..36afeea
--- /dev/null
+++ b/backend/src/utils/wrapMiddleware.ts
@@ -0,0 +1,13 @@
+import { Request, Response, NextFunction, RequestHandler } from 'express';
+
+export const wrapMiddleware = (
+
+    fn: (req: Request, res: Response, next: NextFunction) => any
+): RequestHandler => {
+    return (req, res, next) => {
+        const maybePromise = fn(req, res, next);
+        if (maybePromise instanceof Promise) {
+            maybePromise.catch(next);
+        }
+    }
+}
diff --git a/frontend/src/hooks.server.ts b/frontend/src/hooks.server.ts
new file mode 100644
index 0000000..7935bab
--- /dev/null
+++ b/frontend/src/hooks.server.ts
@@ -0,0 +1,31 @@
+import type { Handle } from '@sveltejs/kit';
+
+export const handle: Handle = async ({ event, resolve }) => {
+    const response = await resolve(event, {
+        filterSerializedResponseHeaders(name) {
+            return name === 'content-type';
+        },
+    });
+
+    response.headers.set('X-Content-Type-Options', 'nosniff');
+
+    response.headers.set(
+        'Content-Security-Policy',
+        [
+            "default-src 'self'",
+            "script-src 'self'",
+            "style-src 'self'",
+            "img-src 'self' data:",
+            "connect-src 'self' http://localhost:3000",
+            "object-src 'none'",
+            "base-uri 'self'",
+            "frame-ancestors 'none'",
+            "font-src 'self' https: data:",
+            "form-action 'self'",
+            "script-src-attr 'none'",
+            "upgrade-insecure-requests"
+        ].join('; ')
+    );
+
+    return response;
+};
\ No newline at end of file
diff --git a/frontend/src/routes/admin/logs/+page.svelte b/frontend/src/routes/admin/logs/+page.svelte
index a0a8d66..4474aa4 100644
--- a/frontend/src/routes/admin/logs/+page.svelte
+++ b/frontend/src/routes/admin/logs/+page.svelte
@@ -12,7 +12,7 @@
 	let error = '';
 
 	onMount(async () => {
-		const token = localStorage.getItem('authix_token') || '';
+		const token = localStorage.getItem('access_token') || '';
 		const res = (await apiGet('/auth/admin/logs', token)) as { logs?: Log[]; error?: string };
 
 		if (res.logs) {
diff --git a/frontend/src/routes/admin/users/+page.svelte b/frontend/src/routes/admin/users/+page.svelte
index 068835f..9147295 100644
--- a/frontend/src/routes/admin/users/+page.svelte
+++ b/frontend/src/routes/admin/users/+page.svelte
@@ -13,7 +13,7 @@
 	let error = '';
 
 	onMount(async () => {
-		const token = localStorage.getItem('authix_token') || '';
+		const token = localStorage.getItem('access_token') || '';
 		const res = (await apiGet('/auth/admin/users', token)) as { users?: User[]; error?: string };
 
 		if (res.users) {
diff --git a/frontend/src/routes/login/+page.svelte b/frontend/src/routes/login/+page.svelte
index 90c321c..2173d32 100644
--- a/frontend/src/routes/login/+page.svelte
+++ b/frontend/src/routes/login/+page.svelte
@@ -8,8 +8,14 @@
 	let success = '';
 
 	type LoginResponse = {
-		token?: string;
-		role?: string;
+		accessToken?: string;
+		refreshToken?: string;
+		user?: {
+			id: number;
+			username: string;
+			email: string;
+			role: string;
+		};
 		error?: string;
 	};
 
@@ -21,8 +27,8 @@
 
 		if (res.error) {
 			error = res.error;
-		} else if (res.token) {
-			localStorage.setItem('authix_token', res.token);
+		} else if (res.accessToken && res.user) {
+			localStorage.setItem('access_token', res.accessToken);
 			success = 'Login successful! Redirecting...';
 			setTimeout(() => goto('/me'), 1000);
 		} else {
diff --git a/frontend/src/routes/me/+page.svelte b/frontend/src/routes/me/+page.svelte
index fc926a6..cba641d 100644
--- a/frontend/src/routes/me/+page.svelte
+++ b/frontend/src/routes/me/+page.svelte
@@ -14,7 +14,7 @@
 	let error = '';
 
 	onMount(async () => {
-		const token = localStorage.getItem('authix_token');
+		const token = localStorage.getItem('access_token');
 		if (!token) {
 			goto('/login');
 			return;
diff --git a/node_modules/.package-lock.json b/node_modules/.package-lock.json
index 994fd62..1382c4e 100644
--- a/node_modules/.package-lock.json
+++ b/node_modules/.package-lock.json
@@ -13,6 +13,24 @@
         "@types/node": "*"
       }
     },
+    "node_modules/@types/jsonwebtoken": {
+      "version": "9.0.9",
+      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.9.tgz",
+      "integrity": "sha512-uoe+GxEuHbvy12OUQct2X9JenKM3qAscquYymuQN4fMWG9DBQtykrQEFcAbVACF7qaLw9BePSodUL0kquqBJpQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/ms": "*",
+        "@types/node": "*"
+      }
+    },
+    "node_modules/@types/ms": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/@types/ms/-/ms-2.1.0.tgz",
+      "integrity": "sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/@types/node": {
       "version": "22.15.17",
       "resolved": "https://registry.npmjs.org/@types/node/-/node-22.15.17.tgz",
diff --git a/node_modules/@types/jsonwebtoken/LICENSE b/node_modules/@types/jsonwebtoken/LICENSE
new file mode 100644
index 0000000..9e841e7
--- /dev/null
+++ b/node_modules/@types/jsonwebtoken/LICENSE
@@ -0,0 +1,21 @@
+    MIT License
+
+    Copyright (c) Microsoft Corporation.
+
+    Permission is hereby granted, free of charge, to any person obtaining a copy
+    of this software and associated documentation files (the "Software"), to deal
+    in the Software without restriction, including without limitation the rights
+    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+    copies of the Software, and to permit persons to whom the Software is
+    furnished to do so, subject to the following conditions:
+
+    The above copyright notice and this permission notice shall be included in all
+    copies or substantial portions of the Software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+    SOFTWARE
diff --git a/node_modules/@types/jsonwebtoken/README.md b/node_modules/@types/jsonwebtoken/README.md
new file mode 100644
index 0000000..0eaa5e4
--- /dev/null
+++ b/node_modules/@types/jsonwebtoken/README.md
@@ -0,0 +1,15 @@
+# Installation
+> `npm install --save @types/jsonwebtoken`
+
+# Summary
+This package contains type definitions for jsonwebtoken (https://github.com/auth0/node-jsonwebtoken).
+
+# Details
+Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/jsonwebtoken.
+
+### Additional Details
+ * Last updated: Sat, 22 Feb 2025 08:03:24 GMT
+ * Dependencies: [@types/ms](https://npmjs.com/package/@types/ms), [@types/node](https://npmjs.com/package/@types/node)
+
+# Credits
+These definitions were written by [Maxime LUCE](https://github.com/SomaticIT), [Daniel Heim](https://github.com/danielheim), [Brice BERNARD](https://github.com/brikou), [Veli-Pekka Kestilä](https://github.com/vpk), [Daniel Parker](https://github.com/GeneralistDev), [Kjell Dießel](https://github.com/kettil), [Robert Gajda](https://github.com/RunAge), [Nico Flaig](https://github.com/nflaig), [Linus Unnebäck](https://github.com/LinusU), [Ivan Sieder](https://github.com/ivansieder), [Piotr Błażejewicz](https://github.com/peterblazejewicz), and [Nandor Kraszlan](https://github.com/nandi95).
diff --git a/node_modules/@types/jsonwebtoken/index.d.ts b/node_modules/@types/jsonwebtoken/index.d.ts
new file mode 100644
index 0000000..24b29a6
--- /dev/null
+++ b/node_modules/@types/jsonwebtoken/index.d.ts
@@ -0,0 +1,271 @@
+/// <reference types="node" />
+
+import type { createPrivateKey, createPublicKey, KeyObject } from "crypto";
+import type { StringValue } from "ms";
+
+export class JsonWebTokenError extends Error {
+    inner: Error;
+
+    constructor(message: string, error?: Error);
+}
+
+export class TokenExpiredError extends JsonWebTokenError {
+    expiredAt: Date;
+
+    constructor(message: string, expiredAt: Date);
+}
+
+/**
+ * Thrown if current time is before the nbf claim.
+ */
+export class NotBeforeError extends JsonWebTokenError {
+    date: Date;
+
+    constructor(message: string, date: Date);
+}
+
+export interface SignOptions {
+    /**
+     * Signature algorithm. Could be one of these values :
+     * - HS256:    HMAC using SHA-256 hash algorithm (default)
+     * - HS384:    HMAC using SHA-384 hash algorithm
+     * - HS512:    HMAC using SHA-512 hash algorithm
+     * - RS256:    RSASSA using SHA-256 hash algorithm
+     * - RS384:    RSASSA using SHA-384 hash algorithm
+     * - RS512:    RSASSA using SHA-512 hash algorithm
+     * - ES256:    ECDSA using P-256 curve and SHA-256 hash algorithm
+     * - ES384:    ECDSA using P-384 curve and SHA-384 hash algorithm
+     * - ES512:    ECDSA using P-521 curve and SHA-512 hash algorithm
+     * - none:     No digital signature or MAC value included
+     */
+    algorithm?: Algorithm | undefined;
+    keyid?: string | undefined;
+    expiresIn?: StringValue | number;
+    notBefore?: StringValue | number | undefined;
+    audience?: string | string[] | undefined;
+    subject?: string | undefined;
+    issuer?: string | undefined;
+    jwtid?: string | undefined;
+    mutatePayload?: boolean | undefined;
+    noTimestamp?: boolean | undefined;
+    header?: JwtHeader | undefined;
+    encoding?: string | undefined;
+    allowInsecureKeySizes?: boolean | undefined;
+    allowInvalidAsymmetricKeyTypes?: boolean | undefined;
+}
+
+export interface VerifyOptions {
+    algorithms?: Algorithm[] | undefined;
+    audience?: string | RegExp | Array<string | RegExp> | undefined;
+    clockTimestamp?: number | undefined;
+    clockTolerance?: number | undefined;
+    /** return an object with the decoded `{ payload, header, signature }` instead of only the usual content of the payload. */
+    complete?: boolean | undefined;
+    issuer?: string | string[] | undefined;
+    ignoreExpiration?: boolean | undefined;
+    ignoreNotBefore?: boolean | undefined;
+    jwtid?: string | undefined;
+    /**
+     * If you want to check `nonce` claim, provide a string value here.
+     * It is used on Open ID for the ID Tokens. ([Open ID implementation notes](https://openid.net/specs/openid-connect-core-1_0.html#NonceNotes))
+     */
+    nonce?: string | undefined;
+    subject?: string | undefined;
+    maxAge?: string | number | undefined;
+    allowInvalidAsymmetricKeyTypes?: boolean | undefined;
+}
+
+export interface DecodeOptions {
+    complete?: boolean | undefined;
+    json?: boolean | undefined;
+}
+export type VerifyErrors =
+    | JsonWebTokenError
+    | NotBeforeError
+    | TokenExpiredError;
+export type VerifyCallback<T = Jwt | JwtPayload | string> = (
+    error: VerifyErrors | null,
+    decoded?: T | undefined,
+) => void;
+
+export type SignCallback = (
+    error: Error | null,
+    encoded?: string | undefined,
+) => void;
+
+// standard names https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1
+export interface JwtHeader {
+    alg: string | Algorithm;
+    typ?: string | undefined;
+    cty?: string | undefined;
+    crit?: Array<string | Exclude<keyof JwtHeader, "crit">> | undefined;
+    kid?: string | undefined;
+    jku?: string | undefined;
+    x5u?: string | string[] | undefined;
+    "x5t#S256"?: string | undefined;
+    x5t?: string | undefined;
+    x5c?: string | string[] | undefined;
+}
+
+// standard claims https://datatracker.ietf.org/doc/html/rfc7519#section-4.1
+export interface JwtPayload {
+    [key: string]: any;
+    iss?: string | undefined;
+    sub?: string | undefined;
+    aud?: string | string[] | undefined;
+    exp?: number | undefined;
+    nbf?: number | undefined;
+    iat?: number | undefined;
+    jti?: string | undefined;
+}
+
+export interface Jwt {
+    header: JwtHeader;
+    payload: JwtPayload | string;
+    signature: string;
+}
+
+// https://github.com/auth0/node-jsonwebtoken#algorithms-supported
+export type Algorithm =
+    | "HS256"
+    | "HS384"
+    | "HS512"
+    | "RS256"
+    | "RS384"
+    | "RS512"
+    | "ES256"
+    | "ES384"
+    | "ES512"
+    | "PS256"
+    | "PS384"
+    | "PS512"
+    | "none";
+
+export type SigningKeyCallback = (
+    error: Error | null,
+    signingKey?: Secret | PublicKey,
+) => void;
+
+export type GetPublicKeyOrSecret = (
+    header: JwtHeader,
+    callback: SigningKeyCallback,
+) => void;
+
+export type PublicKey = Parameters<typeof createPublicKey>[0];
+
+export type PrivateKey = Parameters<typeof createPrivateKey>[0];
+
+export type Secret =
+    | string
+    | Buffer
+    | KeyObject
+    | { key: string | Buffer; passphrase: string };
+
+/**
+ * Synchronously sign the given payload into a JSON Web Token string
+ * payload - Payload to sign, could be an literal, buffer or string
+ * secretOrPrivateKey - Either the secret for HMAC algorithms, or the PEM encoded private key for RSA and ECDSA.
+ * [options] - Options for the signature
+ * returns - The JSON Web Token string
+ */
+export function sign(
+    payload: string | Buffer | object,
+    secretOrPrivateKey: Secret | PrivateKey,
+    options?: SignOptions,
+): string;
+export function sign(
+    payload: string | Buffer | object,
+    secretOrPrivateKey: null,
+    options?: SignOptions & { algorithm: "none" },
+): string;
+
+/**
+ * Sign the given payload into a JSON Web Token string
+ * payload - Payload to sign, could be an literal, buffer or string
+ * secretOrPrivateKey - Either the secret for HMAC algorithms, or the PEM encoded private key for RSA and ECDSA.
+ * [options] - Options for the signature
+ * callback - Callback to get the encoded token on
+ */
+export function sign(
+    payload: string | Buffer | object,
+    secretOrPrivateKey: Secret | PrivateKey,
+    callback: SignCallback,
+): void;
+export function sign(
+    payload: string | Buffer | object,
+    secretOrPrivateKey: Secret | PrivateKey,
+    options: SignOptions,
+    callback: SignCallback,
+): void;
+export function sign(
+    payload: string | Buffer | object,
+    secretOrPrivateKey: null,
+    options: SignOptions & { algorithm: "none" },
+    callback: SignCallback,
+): void;
+
+/**
+ * Synchronously verify given token using a secret or a public key to get a decoded token
+ * token - JWT string to verify
+ * secretOrPublicKey - Either the secret for HMAC algorithms, or the PEM encoded public key for RSA and ECDSA.
+ * [options] - Options for the verification
+ * returns - The decoded token.
+ */
+export function verify(
+    token: string,
+    secretOrPublicKey: Secret | PublicKey,
+    options: VerifyOptions & { complete: true },
+): Jwt;
+export function verify(
+    token: string,
+    secretOrPublicKey: Secret | PublicKey,
+    options?: VerifyOptions & { complete?: false },
+): JwtPayload | string;
+export function verify(
+    token: string,
+    secretOrPublicKey: Secret | PublicKey,
+    options?: VerifyOptions,
+): Jwt | JwtPayload | string;
+
+/**
+ * Asynchronously verify given token using a secret or a public key to get a decoded token
+ * token - JWT string to verify
+ * secretOrPublicKey - A string or buffer containing either the secret for HMAC algorithms,
+ * or the PEM encoded public key for RSA and ECDSA. If jwt.verify is called asynchronous,
+ * secretOrPublicKey can be a function that should fetch the secret or public key
+ * [options] - Options for the verification
+ * callback - Callback to get the decoded token on
+ */
+export function verify(
+    token: string,
+    secretOrPublicKey: Secret | PublicKey | GetPublicKeyOrSecret,
+    callback?: VerifyCallback<JwtPayload | string>,
+): void;
+export function verify(
+    token: string,
+    secretOrPublicKey: Secret | PublicKey | GetPublicKeyOrSecret,
+    options: VerifyOptions & { complete: true },
+    callback?: VerifyCallback<Jwt>,
+): void;
+export function verify(
+    token: string,
+    secretOrPublicKey: Secret | PublicKey | GetPublicKeyOrSecret,
+    options?: VerifyOptions & { complete?: false },
+    callback?: VerifyCallback<JwtPayload | string>,
+): void;
+export function verify(
+    token: string,
+    secretOrPublicKey: Secret | PublicKey | GetPublicKeyOrSecret,
+    options?: VerifyOptions,
+    callback?: VerifyCallback,
+): void;
+
+/**
+ * Returns the decoded payload without verifying if the signature is valid.
+ * token - JWT string to decode
+ * [options] - Options for decoding
+ * returns - The decoded Token
+ */
+export function decode(token: string, options: DecodeOptions & { complete: true }): null | Jwt;
+export function decode(token: string, options: DecodeOptions & { json: true }): null | JwtPayload;
+export function decode(token: string, options?: DecodeOptions): null | JwtPayload | string;
diff --git a/node_modules/@types/jsonwebtoken/package.json b/node_modules/@types/jsonwebtoken/package.json
new file mode 100644
index 0000000..c7d32fc
--- /dev/null
+++ b/node_modules/@types/jsonwebtoken/package.json
@@ -0,0 +1,84 @@
+{
+    "name": "@types/jsonwebtoken",
+    "version": "9.0.9",
+    "description": "TypeScript definitions for jsonwebtoken",
+    "homepage": "https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/jsonwebtoken",
+    "license": "MIT",
+    "contributors": [
+        {
+            "name": "Maxime LUCE",
+            "githubUsername": "SomaticIT",
+            "url": "https://github.com/SomaticIT"
+        },
+        {
+            "name": "Daniel Heim",
+            "githubUsername": "danielheim",
+            "url": "https://github.com/danielheim"
+        },
+        {
+            "name": "Brice BERNARD",
+            "githubUsername": "brikou",
+            "url": "https://github.com/brikou"
+        },
+        {
+            "name": "Veli-Pekka Kestilä",
+            "githubUsername": "vpk",
+            "url": "https://github.com/vpk"
+        },
+        {
+            "name": "Daniel Parker",
+            "githubUsername": "GeneralistDev",
+            "url": "https://github.com/GeneralistDev"
+        },
+        {
+            "name": "Kjell Dießel",
+            "githubUsername": "kettil",
+            "url": "https://github.com/kettil"
+        },
+        {
+            "name": "Robert Gajda",
+            "githubUsername": "RunAge",
+            "url": "https://github.com/RunAge"
+        },
+        {
+            "name": "Nico Flaig",
+            "githubUsername": "nflaig",
+            "url": "https://github.com/nflaig"
+        },
+        {
+            "name": "Linus Unnebäck",
+            "githubUsername": "LinusU",
+            "url": "https://github.com/LinusU"
+        },
+        {
+            "name": "Ivan Sieder",
+            "githubUsername": "ivansieder",
+            "url": "https://github.com/ivansieder"
+        },
+        {
+            "name": "Piotr Błażejewicz",
+            "githubUsername": "peterblazejewicz",
+            "url": "https://github.com/peterblazejewicz"
+        },
+        {
+            "name": "Nandor Kraszlan",
+            "githubUsername": "nandi95",
+            "url": "https://github.com/nandi95"
+        }
+    ],
+    "main": "",
+    "types": "index.d.ts",
+    "repository": {
+        "type": "git",
+        "url": "https://github.com/DefinitelyTyped/DefinitelyTyped.git",
+        "directory": "types/jsonwebtoken"
+    },
+    "scripts": {},
+    "dependencies": {
+        "@types/ms": "*",
+        "@types/node": "*"
+    },
+    "peerDependencies": {},
+    "typesPublisherContentHash": "1af47fd7adaac303d61fe420f090b7c63e0654a22805acad05550770fa3f5d9c",
+    "typeScriptVersion": "5.0"
+}
\ No newline at end of file
diff --git a/node_modules/@types/ms/LICENSE b/node_modules/@types/ms/LICENSE
new file mode 100644
index 0000000..9e841e7
--- /dev/null
+++ b/node_modules/@types/ms/LICENSE
@@ -0,0 +1,21 @@
+    MIT License
+
+    Copyright (c) Microsoft Corporation.
+
+    Permission is hereby granted, free of charge, to any person obtaining a copy
+    of this software and associated documentation files (the "Software"), to deal
+    in the Software without restriction, including without limitation the rights
+    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+    copies of the Software, and to permit persons to whom the Software is
+    furnished to do so, subject to the following conditions:
+
+    The above copyright notice and this permission notice shall be included in all
+    copies or substantial portions of the Software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+    SOFTWARE
diff --git a/node_modules/@types/ms/README.md b/node_modules/@types/ms/README.md
new file mode 100644
index 0000000..1152869
--- /dev/null
+++ b/node_modules/@types/ms/README.md
@@ -0,0 +1,82 @@
+# Installation
+> `npm install --save @types/ms`
+
+# Summary
+This package contains type definitions for ms (https://github.com/vercel/ms).
+
+# Details
+Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/ms.
+## [index.d.ts](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/ms/index.d.ts)
+````ts
+/**
+ * Short/Long format for `value`.
+ *
+ * @param {Number} value
+ * @param {{long: boolean}} options
+ * @return {String}
+ */
+declare function ms(value: number, options?: { long: boolean }): string;
+
+/**
+ * Parse the given `value` and return milliseconds.
+ *
+ * @param {ms.StringValue} value
+ * @return {Number}
+ */
+declare function ms(value: ms.StringValue): number;
+
+declare namespace ms {
+    // Unit, UnitAnyCase, and StringValue are backported from ms@3
+    // https://github.com/vercel/ms/blob/8b5923d1d86c84a9f6aba8022d416dcf2361aa8d/src/index.ts
+
+    type Unit =
+        | "Years"
+        | "Year"
+        | "Yrs"
+        | "Yr"
+        | "Y"
+        | "Weeks"
+        | "Week"
+        | "W"
+        | "Days"
+        | "Day"
+        | "D"
+        | "Hours"
+        | "Hour"
+        | "Hrs"
+        | "Hr"
+        | "H"
+        | "Minutes"
+        | "Minute"
+        | "Mins"
+        | "Min"
+        | "M"
+        | "Seconds"
+        | "Second"
+        | "Secs"
+        | "Sec"
+        | "s"
+        | "Milliseconds"
+        | "Millisecond"
+        | "Msecs"
+        | "Msec"
+        | "Ms";
+
+    type UnitAnyCase = Unit | Uppercase<Unit> | Lowercase<Unit>;
+
+    type StringValue =
+        | `${number}`
+        | `${number}${UnitAnyCase}`
+        | `${number} ${UnitAnyCase}`;
+}
+
+export = ms;
+
+````
+
+### Additional Details
+ * Last updated: Thu, 16 Jan 2025 21:02:45 GMT
+ * Dependencies: none
+
+# Credits
+These definitions were written by [Zhiyuan Wang](https://github.com/danny8002).
diff --git a/node_modules/@types/ms/index.d.ts b/node_modules/@types/ms/index.d.ts
new file mode 100644
index 0000000..b1b1f51
--- /dev/null
+++ b/node_modules/@types/ms/index.d.ts
@@ -0,0 +1,63 @@
+/**
+ * Short/Long format for `value`.
+ *
+ * @param {Number} value
+ * @param {{long: boolean}} options
+ * @return {String}
+ */
+declare function ms(value: number, options?: { long: boolean }): string;
+
+/**
+ * Parse the given `value` and return milliseconds.
+ *
+ * @param {ms.StringValue} value
+ * @return {Number}
+ */
+declare function ms(value: ms.StringValue): number;
+
+declare namespace ms {
+    // Unit, UnitAnyCase, and StringValue are backported from ms@3
+    // https://github.com/vercel/ms/blob/8b5923d1d86c84a9f6aba8022d416dcf2361aa8d/src/index.ts
+
+    type Unit =
+        | "Years"
+        | "Year"
+        | "Yrs"
+        | "Yr"
+        | "Y"
+        | "Weeks"
+        | "Week"
+        | "W"
+        | "Days"
+        | "Day"
+        | "D"
+        | "Hours"
+        | "Hour"
+        | "Hrs"
+        | "Hr"
+        | "H"
+        | "Minutes"
+        | "Minute"
+        | "Mins"
+        | "Min"
+        | "M"
+        | "Seconds"
+        | "Second"
+        | "Secs"
+        | "Sec"
+        | "s"
+        | "Milliseconds"
+        | "Millisecond"
+        | "Msecs"
+        | "Msec"
+        | "Ms";
+
+    type UnitAnyCase = Unit | Uppercase<Unit> | Lowercase<Unit>;
+
+    type StringValue =
+        | `${number}`
+        | `${number}${UnitAnyCase}`
+        | `${number} ${UnitAnyCase}`;
+}
+
+export = ms;
diff --git a/node_modules/@types/ms/package.json b/node_modules/@types/ms/package.json
new file mode 100644
index 0000000..0f547d0
--- /dev/null
+++ b/node_modules/@types/ms/package.json
@@ -0,0 +1,26 @@
+{
+    "name": "@types/ms",
+    "version": "2.1.0",
+    "description": "TypeScript definitions for ms",
+    "homepage": "https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/ms",
+    "license": "MIT",
+    "contributors": [
+        {
+            "name": "Zhiyuan Wang",
+            "githubUsername": "danny8002",
+            "url": "https://github.com/danny8002"
+        }
+    ],
+    "main": "",
+    "types": "index.d.ts",
+    "repository": {
+        "type": "git",
+        "url": "https://github.com/DefinitelyTyped/DefinitelyTyped.git",
+        "directory": "types/ms"
+    },
+    "scripts": {},
+    "dependencies": {},
+    "peerDependencies": {},
+    "typesPublisherContentHash": "2c8651ce1714fdc6bcbc0f262c93a790f1d127fb1c2dc8edbb583decef56fd39",
+    "typeScriptVersion": "5.0"
+}
\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
index 5545e9e..b9d9629 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -5,7 +5,8 @@
   "packages": {
     "": {
       "devDependencies": {
-        "@types/cors": "^2.8.18"
+        "@types/cors": "^2.8.18",
+        "@types/jsonwebtoken": "^9.0.9"
       }
     },
     "node_modules/@types/cors": {
@@ -18,6 +19,24 @@
         "@types/node": "*"
       }
     },
+    "node_modules/@types/jsonwebtoken": {
+      "version": "9.0.9",
+      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.9.tgz",
+      "integrity": "sha512-uoe+GxEuHbvy12OUQct2X9JenKM3qAscquYymuQN4fMWG9DBQtykrQEFcAbVACF7qaLw9BePSodUL0kquqBJpQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/ms": "*",
+        "@types/node": "*"
+      }
+    },
+    "node_modules/@types/ms": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/@types/ms/-/ms-2.1.0.tgz",
+      "integrity": "sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/@types/node": {
       "version": "22.15.17",
       "resolved": "https://registry.npmjs.org/@types/node/-/node-22.15.17.tgz",
